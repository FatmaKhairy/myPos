<?phpnamespace App\Http\Controllers\Dashboard;use App\User;use Illuminate\Http\Request;use App\Http\Controllers\Controller;use Illuminate\Support\Facades\Storage;use Illuminate\Validation\Rule;use Intervention\Image\Facades\Image;class UserController extends Controller{		public function __construct()		{				$this->middleware(['permission:read_users'  ]) ->only('index');				$this->middleware(['permission:create_users']) ->only('create');				$this->middleware(['permission:update_users']) ->only('edit');				$this->middleware(['permission:delete_users']) ->only('destroy');		}		public function index(Request $request)    {			/*	$users = User::whereRoleIs('admin')->where(function ($q) use ($request) {						return $q->when($request->search, function ($query) use ($request) {								return $query->where('first_name', 'like', '%' . $request->search . '%')										->orWhere('last_name', 'like', '%' . $request->search . '%');						});				})*/			$users=User::whereRoleIs('admin')->where(function ($q) use ($request){					return $q->where('first_name','like','%'.$request->search.'%')					->orWhere('last_name', 'like', '%' . $request->search . '%');			})						->latest()->paginate(5);				return view('dashboard.users.index', compact('users'));    }//end of index fun    public function create()    {        return view('dashboard.users.create');    }//end of create fun    public function store(Request $request)    {       $request->validate([        		'first_name'=>'required',						'last_name'=>'required',						'email'=>'required|unique:users',					  'image'=>'image',						'password'=>'required|confirmed',					  'permissions'=>'required',//اقدر اشلها واستخدم if زي ماانا عامله تحت لو مش عايزه ادي لبعض الادمن صلاحيات ولكن دا غير منطقي				]);       $request_data=$request->except(['password','confirm-password','permissions','image']);       $request_data['password']= bcrypt($request->password);       if($request->image)       {					 Image::make($request->image)							 ->resize(300, null, function ($constraint)							 {							 $constraint->aspectRatio();					     })->save(public_path('uploads/user_images/'. $request->image->hashName()));					 $request_data['image']=$request->image->hashName();			 }//end if       $user=User::create($request_data);		   $user->attachRole('admin');				//if($request->permissions) لو عملت ان الصلاحيات مش مطلوبه استخدمها			 //	{				$user->syncPermissions($request->permissions);				//}       session()->flash('success', __('site.added-successfully'));//noty1       return redirect()->route('dashboard.users.index');    }//enf of store    public function edit(User $user)    {       return view('dashboard.users.edit',compact('user'));    }    public function update(Request $request, User $user)		{				$request->validate([						'first_name' => 'required',						'last_name' => 'required',						'email' => ['required',Rule::unique('users')->ignore($user->id)],						'image'=>'image',						'permissions'=>'required',				]);				$request_data = $request->except(['permissions','image']);				if($request->image)				{						if ($user->image != 'default.jpg'){								Storage::disk('public_uploads')->delete('/user_images/'.$user->image);						}						Image::make($request->image)								->resize(300, null, function ($constraint)								{										$constraint->aspectRatio();								})->save(public_path('uploads/user_images/'. $request->image->hashName()));						$request_data['image']=$request->image->hashName();				}				$user->update($request_data);				//if($request->permissions) {لو الصلاحيات مطلوبه				//اليوزر بالفعل معمول ليه attachRole				$user->syncPermissions($request->permissions);		//}				session()->flash('success', __('site.updated-successfully'));//noty1				return redirect()->route('dashboard.users.index');		}    /**     * Remove the specified resource from storage.     *     * @param  \App\User  $user     * @return \Illuminate\Http\Response     */    public function destroy(User $user)    {    		if($user->image!='default.jpg')				{						Storage::disk('public_uploads')->delete('/user_images/'. $user->image);				}        $user->delete();        session()->flash('success',__('site.deleted-successfully'));				return redirect()->route('dashboard.users.index');    }}